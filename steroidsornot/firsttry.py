# AUTOGENERATED! DO NOT EDIT! File to edit: 00_firsttry.ipynb (unless otherwise specified).

__all__ = ['PrawClient', 'storage_path', 'natural_path', 'steroids_path', 'uncertain_path', 'irrelevant_path',
           'get_thumbnail_index', 'get_thumbnail', 'get_images']

# Cell
from fastbook import *
from fastai.vision.widgets import *
# Loads environment variables from .env file

import os
import praw
import requests
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv

# Cell
class PrawClient():
    def __init__(self):
        load_dotenv()
        self.client_id = os.environ.get('REDDIT_CLIENT_ID')
        self.client_secret = os.environ.get('REDDIT_CLIENT_SECRET')
        self.user_agent = 'User-Agent: Steroid detector bot by /u/thetreecycle'
        # Output client_id to see if it's working
        print(f'Starting instance with client_id {self.client_id}')

    def reddit(self):
        return praw.Reddit(
            client_id=self.client_id,
            client_secret=self.client_secret,
            user_agent=self.user_agent,
        )
    def subreddit(self, subreddit):
        return self.reddit().subreddit(subreddit)

# Cell
storage_path = Path('./data/images')

natural_path = storage_path / 'natural'

steroids_path = storage_path / 'steroids'

uncertain_path = storage_path / 'uncertain'

irrelevant_path = storage_path / 'irrelevant'

for path in [natural_path, steroids_path, uncertain_path, irrelevant_path]:
    path.mkdir(parents=True, exist_ok=True)

# Cell
def get_thumbnail_index(submission):
    '''
    Picks which thumbnail to download from list. thumbnails at index 2
    all seem to have a width of 320 pixels, which is perfect for training.
    Some original pictures are smaller than this though, so we just grab the next
    biggest size
    '''
    if submission.preview['images'][0]['source']['width'] >= 320:
        return 2
    else:
        return -1

# Cell
def get_thumbnail(submission):
    thumbnail_index = get_thumbnail_index(submission)
    image_url = submission.preview['images'][0]['resolutions'][thumbnail_index]['url']

    response = requests.get(image_url)
    filename = response.url.split('/')[-1].split('?')[0]

    return response, filename

# Cell
def get_images(subreddit, query, path, limit=3):
    '''Downloads multiple images from subreddit for training, of just big enough size for training'''
    submissions = subreddit.search(query=query,limit=limit)

    images_count = 0
    for submission in submissions:
    #     print(submission.preview['images'][0])
        response, filename = get_thumbnail(submission)

        if response.status_code == 200:
            with open(path / filename, 'wb') as f:
                f.write(response.content)

        images_count += 1

    print(f"I downloaded {images_count} images to {path}")